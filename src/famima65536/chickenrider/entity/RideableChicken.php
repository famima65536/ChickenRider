<?php

namespace famima65536\chickenrider\entity;

use pocketmine\block\Transparent;
use pocketmine\entity\EntitySizeInfo;
use pocketmine\entity\Living;
use pocketmine\event\entity\EntityDamageByEntityEvent;
use pocketmine\event\entity\EntityDamageEvent;
use pocketmine\math\Vector3;
use pocketmine\network\mcpe\protocol\SetActorLinkPacket;
use pocketmine\network\mcpe\protocol\types\entity\EntityIds;
use pocketmine\network\mcpe\protocol\types\entity\EntityLink;
use pocketmine\network\mcpe\protocol\types\entity\EntityMetadataProperties;
use pocketmine\player\Player;

class RideableChicken extends Living {

	protected function getInitialSizeInfo(): EntitySizeInfo{
		return new EntitySizeInfo(0.5, 0.3, 0.4);
	}

	public static function getNetworkTypeId(): string{
		return EntityIds::CHICKEN;
	}

	public function getName(): string{
		return "Rideable Chicken";
	}

	private ?Player $rider = null;

	protected function setRider(?Player $rider):void{
		$this->rider = $rider;
	}

	public function riddenBy(Player $rider):void{
		$this->setRider($rider);
		$rider->getNetworkProperties()->setVector3(EntityMetadataProperties::RIDER_SEAT_POSITION, new Vector3(0, 1.5, 0));
		$pk = SetActorLinkPacket::create(new EntityLink(
			$this->getId(),
			$rider->getId(),
			EntityLink::TYPE_RIDER,
			false,
			false
		));
		$this->getWorld()->broadcastPacketToViewers($this->getLocation(), $pk);
	}

	public function gottenOff(): void{
		$this->motion = new Vector3(0,0,0);
	}

	public function onUpdate(int $currentTick): bool{
		if($this->rider !== null){
			$this->location->yaw = $this->rider->getLocation()->yaw;
		}

		if($this->motion->y <= -0.5) $this->motion->y = -0.5;
		$blockInfrontOf = $this->getTargetBlock(1);
		if($blockInfrontOf !== null and !$blockInfrontOf instanceof Transparent){
			$this->addMotion(0,2,0);
		}
		return parent::onUpdate($currentTick); // TODO: Change the autogenerated stub
	}

}